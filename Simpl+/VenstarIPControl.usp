/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: George Kanellopoulos 
Comments: For any Inquiries or Recommendations contact georgecaneilson@gmail.com
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

#IncludePath "C:\\SimplSharpLibs\\Venstar5.00\\Debug"
#User_SimplSharp_Library "VenstarIPControl1.01"
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
Digital_Input FanTo0, FanTo1, ModeTo0, ModeTo1, ModeTo2, ModeTo3, CoolTempUp, CoolTempDown, HeatTempUp, HeatTempDown, Query, _skip_; 
// STRING_INPUT 
// BUFFER_INPUT 

Digital_Output FanFb, FanStateFb, AwayFb;
Analog_Output ModeFb, SensorTempFb;
String_Output SensorNameFb, HeatTempFb, CoolTempFb, TempFb;
String_Output Response, Info, SensorInfo, _skip_;


/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
String_Parameter _skip_, _skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_, IP[15];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";

*******************************************************************************************/
Venstar ven1;
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING
string messagepassed[10000];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

/* Push Fan {
	
	ven1.FanToggle();
	Delay(20);
	Info = ven1.QueryInfo();
	ven1.InfoFbHandler(Info);
	FanFb = ven1.FanFb;
} */ 
    

Push FanTo0 {
	ven1.FanTo0();
	// ven1.InfoFbHandler(ven1.QueryInfo());
	Info = ven1.QueryInfo();
	ven1.InfoFbHandler(Info);
	SensorInfo = ven1.SensorQueryInfo();
	ven1.SensorFbHandler(SensorInfo);
	FanFb = ven1.FanFb;
	SensorNameFb = ven1.SensorNameFb;
	SensorTempFb = ven1.SensorTempFb;
}

Push FanTo1 {
	ven1.FanTo1();
	// ven1.InfoFbHandler(ven1.QueryInfo());
	Info = ven1.QueryInfo();
	ven1.InfoFbHandler(Info);
	SensorInfo = ven1.SensorQueryInfo();
	ven1.SensorFbHandler(SensorInfo);
	FanFb = ven1.FanFb;
	SensorNameFb = ven1.SensorNameFb;
	SensorTempFb = ven1.SensorTempFb;	
	
	// ven1.InfoFbHandler(QueryInfo);
}

Push ModeTo0 {
	ven1.ModeTo0();
	Info = ven1.QueryInfo();
	ven1.InfoFbHandler(Info);
	ModeFb = ven1.ModeFb;
}

Push ModeTo1 {
	ven1.ModeTo1();
	Info = ven1.QueryInfo();
	ven1.InfoFbHandler(Info);
	ModeFb = ven1.ModeFb;
}

Push ModeTo2 {
	ven1.ModeTo2();
	Info = ven1.QueryInfo();
	ven1.InfoFbHandler(Info);
	ModeFb = ven1.ModeFb;
}

Push ModeTo3 {
	ven1.ModeTo3();
	Info = ven1.QueryInfo();
	ven1.InfoFbHandler(Info);
	SensorInfo = ven1.SensorQueryInfo();
	ven1.SensorFbHandler(SensorInfo);
	ModeFb = ven1.ModeFb;
	SensorNameFb = ven1.SensorNameFb;
	SensorTempFb = ven1.SensorTempFb;
}

Push CoolTempUp {
	ven1.CoolTempUp();
	Info = ven1.QueryInfo();
	ven1.InfoFbHandler(Info);
	CoolTempFb = ven1.CoolTempFb;
	TempFb = ven1.TempFb;
}

Push HeatTempUp {
	ven1.HeatTempUp();
	Info = ven1.QueryInfo();
	ven1.InfoFbHandler(Info);
	HeatTempFb = ven1.HeatTempFb;
	TempFb = ven1.TempFb;
}

Push CoolTempDown {
	ven1.CoolTempDown();
	Info = ven1.QueryInfo();
	ven1.InfoFbHandler(Info);
	CoolTempFb = ven1.CoolTempFb;
	TempFb = ven1.TempFb;
}

Push HeatTempDown {
	ven1.HeatTempDown();
	Info = ven1.QueryInfo();
	ven1.InfoFbHandler(Info);
	HeatTempFb = ven1.HeatTempFb;
	TempFb = ven1.TempFb;
} 

Push Query {
	Info = ven1.QueryInfo();
	ven1.InfoFbHandler(Info);
	ModeFb = ven1.ModeFb;
	FanFb = ven1.FanFb;
}


/*
RELEASE input
{
    // TODO:  Add code here
}
*/


/* Change Mode {
	ven1.Mode(Mode);
	Delay(20);
	Info = ven1.QueryInfo();
	ven1.InfoFbHandler(Info);
	ModeFb = ven1.ModeFb;
}
 */
/* Change HeatTemp {
	ven1.Control(FanFb, ModeFb, HeatTemp, CoolTempFb);	
}

Change CoolTemp {
	ven1.Control(FanFb, ModeFb, HeatTempFb, CoolTemp);
} */


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
	ven1.VenstarIP(IP);
}


